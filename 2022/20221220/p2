#!/bin/bash

INPUT=input.txt
(( TEST )) && INPUT=test.txt
(( TEST > 1 )) && INPUT=test$TEST.txt
(( TEST )) && DEBUG=1

function debug
{
	(( DEBUG )) || return 0
	if (( $# )); then
		printf "$@" >&2
	else
		echo >&2
	fi
}

function error
{
	printf "$@" >&2
	exit 1
}

function ReadStuff
{
	local LINE RE='^(-?[0-9]+)$'
	local -i N=0 MINNUM=0 MOSTNEGCYCLES
	while read LINE ; do
		if [[ "$LINE" =~ $RE ]]; then
			(( NUM[N] = BASH_REMATCH[1] ))
			(( NUM[N] == 0 )) && (( ZERO = N ))
			(( NUM[N] < MINNUM )) && (( MINNUM = NUM[N] ))
			(( NUM[N] *= KEY ))
			(( PN[N] = N - 1 )) # Index of prev number
			(( NN[N] = N + 1 )) # Index of next number
			(( N++ ))
		else
			error "Could not parse '%s'\n" "$LINE"
		fi
	done
	(( NUMNUMS = N ))
	# Close circlular list
	(( PN[0] = N - 1 ))
	(( NN[N-1] = 0 ))
	# Calc actual moves and make all positive
	(( MOSTNEGCYCLES = -MINNUM / NUMNUMS + 1 ))
	for (( N = 0 ; N < NUMNUMS ; N++ )); do
		(( NUM[N] == 0 )) && continue
		if (( NUM[N] > 0 )); then
			(( MOVE[N] = NUM[N] % ( NUMNUMS - 1 ) ))
		else
			(( MOVE[N] = ( NUM[N] + MOSTNEGCYCLES * ( NUMNUMS - 1 ) * KEY ) % ( NUMNUMS - 1 ) ))
		fi
	done
}

function NumList
{
	local -i N=0 I
	for (( I = 0; I < NUMNUMS ; I++ )); do
		printf "%d<-(%d=%d:%d)->%d " ${PN[N]} $N ${MOVE[N]} ${NUM[N]} ${NN[N]}
		(( N = NN[N] ))
	done
	echo
}

function Decrypt
{
	local -i N I MOV OPN ONN NPN NNN DIR
	for (( N = 0; N < NUMNUMS ; N++ )); do
		(( N % 100 == 0 )) && printf "@ N = %d\n" $N
		(( MOV = MOVE[N] ))
		if (( MOV == 0 )); then
			continue
		fi
		# Old Prev/Next
		(( OPN = PN[N] ))
		(( ONN = NN[N] ))
		# Remove
		(( NN[OPN] = ONN ))
		(( PN[ONN] = OPN ))
		# Find New Prev/Next
		if (( MOV > 0 )); then
			(( NPN = OPN ))
			for (( I = 0 ; I < MOV ; I++ )); do
				(( NPN = NN[NPN] ))
			done
			(( NNN = NN[NPN] ))
		else
			(( NNN = ONN ))
			for (( I = 0 ; I > MOV ; I-- )); do
				(( NNN = PN[NNN] ))
			done
			(( NPN = PN[NNN] ))
		fi
		# Insert
		(( PN[N] = NPN ))
		(( NN[N] = NNN ))
		(( NN[NPN] = N ))
		(( PN[NNN] = N ))
	done
}

function FindCoords
{
	local -i N=$ZERO I
	for (( I = 1 ; I <= 3000 ; I++ )); do
		(( N = NN[N] ))
		if (( I % 1000 == 0 )); then
			(( COORDS[I/1000] = NUM[N] ))
		fi
	done
}

function FindGrove
{
	local INPUT="$1"
	local -i NUMNUMS=0 NUM=() MOVE=() PN=() NN=() ZERO COORDS=() KEY=811589153 I
	ReadStuff < $INPUT
	debug "There are %d numbers : %s\n" $NUMNUMS "$( NumList )"
	for (( I = 1 ; I <= 10 ; I++ )); do
		Decrypt
		debug "After decryption round %d positions are: %s\n" $I "$( NumList )"
	done
	FindCoords
	printf "Coordinates are %d, %d, %d : sum = %d\n" ${COORDS[@]} $(( COORDS[1] + COORDS[2] + COORDS[3] ))
}

FindGrove $INPUT ; exit $?
