#!/bin/bash

INPUT=input.txt
(( TEST )) && INPUT=test.txt
(( TEST > 1 )) && INPUT=test$TEST.txt
(( TEST )) && DEBUG=1

function debug
{
	(( DEBUG )) || return 0
	if (( $# )); then
		printf "$@" >&2
	else
		echo >&2
	fi
}

function error
{
	printf "$@" >&2
	exit 1
}

# CUBEID = XXYYZZ  x*10000+y*100+z
# CUBE[] = UDFBLR1 Bitmap Up/Down/Front/Back/Left/Right/1
# Shift cubes by +1,+1,+1 so we don't need to worry about -ve coords later
function ReadCubes
{
	local LINE RE='^([0-9]+),([0-9]+),([0-9]+)$'
	local -i CUBEID
	while read LINE ; do
		if [[ "$LINE" =~ $RE ]]; then
			(( CUBEID = BASH_REMATCH[1] * 10000 + BASH_REMATCH[2] * 100 + BASH_REMATCH[3] + 10101 ))
			(( CUBES[CUBEID] = 1 ))
			(( CUBES[CUBEID-1]     )) && { (( CONNECTIONS++ )) ; (( CUBES[CUBEID] |=  2 )) ; (( CUBES[CUBEID-1]     |=  4 )) ; }
			(( CUBES[CUBEID+1]     )) && { (( CONNECTIONS++ )) ; (( CUBES[CUBEID] |=  4 )) ; (( CUBES[CUBEID+1]     |=  2 )) ; }
			(( CUBES[CUBEID-100]   )) && { (( CONNECTIONS++ )) ; (( CUBES[CUBEID] |=  8 )) ; (( CUBES[CUBEID-100]   |= 16 )) ; }
			(( CUBES[CUBEID+100]   )) && { (( CONNECTIONS++ )) ; (( CUBES[CUBEID] |= 16 )) ; (( CUBES[CUBEID+100]   |=  8 )) ; }
			(( CUBES[CUBEID-10000] )) && { (( CONNECTIONS++ )) ; (( CUBES[CUBEID] |= 32 )) ; (( CUBES[CUBEID-10000] |= 64 )) ; }
			(( CUBES[CUBEID+10000] )) && { (( CONNECTIONS++ )) ; (( CUBES[CUBEID] |= 64 )) ; (( CUBES[CUBEID+10000] |= 32 )) ; }
			(( NUMCUBES++ ))
		else
			error "Failed to parse [%s]\n" "$LINE"
		fi
	done
}

# POS = Visited
function FindExterior
{
	local -i POS=() POSID STACK=( 0 ) SF=0 SB=1
	while (( SF < SB )); do
		(( POSID = STACK[SF++] ))
		(( POS[POSID] )) && continue
		(( POS[POSID] = 1 ))
		(( ( POSID         ) % 100 > 0 )) && { (( CUBES[POSID-1]     )) && { (( SURFACE++ )) ; true ; } || { (( STACK[SB++] = POSID - 1     )) ; } ; }
		(( ( POSID         ) % 100 < S )) && { (( CUBES[POSID+1]     )) && { (( SURFACE++ )) ; true ; } || { (( STACK[SB++] = POSID + 1     )) ; } ; }
		(( ( POSID /   100 ) % 100 > 0 )) && { (( CUBES[POSID-100]   )) && { (( SURFACE++ )) ; true ; } || { (( STACK[SB++] = POSID - 100   )) ; } ; }
		(( ( POSID /   100 ) % 100 < S )) && { (( CUBES[POSID+100]   )) && { (( SURFACE++ )) ; true ; } || { (( STACK[SB++] = POSID + 100   )) ; } ; }
		(( ( POSID / 10000 ) % 100 > 0 )) && { (( CUBES[POSID-10000] )) && { (( SURFACE++ )) ; true ; } || { (( STACK[SB++] = POSID - 10000 )) ; } ; }
		(( ( POSID / 10000 ) % 100 < S )) && { (( CUBES[POSID+10000] )) && { (( SURFACE++ )) ; true ; } || { (( STACK[SB++] = POSID + 10000 )) ; } ; }
		debug "Stack = %s\n" "${STACK[*]:SF}"
		(( DEBUG )) && sleep 0.01
	done
}

function CalcSurfaceArea
{
	local INPUT="$1"
	local -i CUBES=()
	local -i NUMCUBES=0 CONNECTIONS=0 SURFACE=0
	local -i S=22
	(( TEST )) && (( S = 8 ))
	ReadCubes < $INPUT
	FindExterior
	printf "There are %d cubes with %d joining faces, which leaves %d surface faces, of which %d are on the outside\n" $NUMCUBES $CONNECTIONS $(( 6 * NUMCUBES - CONNECTIONS * 2 )) $SURFACE
}

CalcSurfaceArea $INPUT ; exit $?
